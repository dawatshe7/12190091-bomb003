(gdb) b phase_3
Breakpoint 2 at 0x400f15
(gdb) r phase1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/d/Bsc in IT 2019/3rd year/ITS304/Assignment 1_2/Assignment 1/bomb003/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5

Breakpoint 1, 0x0000000000400ea9 in phase_2 ()
(gdb) ir
Undefined command: "ir".  Try "help".
(gdb) i r
rax            0x6037f0            6305776
rbx            0x7ffffffee268      140737488282216
rcx            0xb                 11
rdx            0x6037f0            6305776
rsi            0x1                 1
rdi            0x6037f0            6305776
rbp            0x0                 0x0
rsp            0x7ffffffee168      0x7ffffffee168
r8             0x6037f0            6305776
r9             0x7c                124
r10            0x7fffff7d0770      140737479772016
r11            0x7fffff7d0770      140737479772016
r12            0x400c60            4197472
r13            0x7ffffffee260      140737488282208
r14            0x0                 0
r15            0x0                 0
rip            0x400ea9            0x400ea9 <phase_2>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) i b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400ea9 <phase_2>
        breakpoint already hit 1 time
2       breakpoint     keep y   0x0000000000400f15 <phase_3>
(gdb) del 1
(gdb) r phase1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/d/Bsc in IT 2019/3rd year/ITS304/Assignment 1_2/Assignment 1/bomb003/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
i love u

Breakpoint 2, 0x0000000000400f15 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) x/s0x4025af
0x4025af:       "%d %d"
(gdb) r phase1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/d/Bsc in IT 2019/3rd year/ITS304/Assignment 1_2/Assignment 1/bomb003/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
1 2

Breakpoint 2, 0x0000000000400f15 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) u * 0x0000000000400f3b
0x0000000000400f3b in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7ffffffee268      140737488282216
rcx            0x0                 0
rdx            0x7ffffffee154      140737488281940
rsi            0x0                 0
rdi            0x7ffffffedb00      140737488280320
rbp            0x0                 0x0
rsp            0x7ffffffee150      0x7ffffffee150
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee260      140737488282208
r14            0x0                 0
r15            0x0                 0
rip            0x400f3b            0x400f3b <phase_3+38>
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) u * 0x0000000000400f4e
0x0000000000400f4e in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
=> 0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) ni
0x0000000000400f55 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
=> 0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) ni
0x0000000000400f5a in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
=> 0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) ni
0x0000000000400f97 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
=> 0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) i r
rax            0xc6                198
rbx            0x7ffffffee268      140737488282216
rcx            0x0                 0
rdx            0x7ffffffee154      140737488281940
rsi            0x0                 0
rdi            0x7ffffffedb00      140737488280320
rbp            0x0                 0x0
rsp            0x7ffffffee150      0x7ffffffee150
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee260      140737488282208
r14            0x0                 0
r15            0x0                 0
rip            0x400f97            0x400f97 <phase_3+130>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) r phase1.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/d/Bsc in IT 2019/3rd year/ITS304/Assignment 1_2/Assignment 1/bomb003/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 3 5

BOOM!!!
The bomb has blown up.
[Inferior 1 (process 81) exited with code 010]
(gdb) r phase1.txt
Starting program: /mnt/d/Bsc in IT 2019/3rd year/ITS304/Assignment 1_2/Assignment 1/bomb003/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
1 198

Breakpoint 2, 0x0000000000400f15 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f15 <+0>:     sub    $0x18,%rsp
   0x0000000000400f19 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f22 <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f27 <+18>:    xor    %eax,%eax
   0x0000000000400f29 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f2e <+25>:    mov    %rsp,%rdx
   0x0000000000400f31 <+28>:    mov    $0x4025af,%esi
   0x0000000000400f36 <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f3b <+38>:    cmp    $0x1,%eax
   0x0000000000400f3e <+41>:    jg     0x400f45 <phase_3+48>
   0x0000000000400f40 <+43>:    callq  0x40142a <explode_bomb>
   0x0000000000400f45 <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f49 <+52>:    ja     0x400f86 <phase_3+113>
   0x0000000000400f4b <+54>:    mov    (%rsp),%eax
   0x0000000000400f4e <+57>:    jmpq   *0x402420(,%rax,8)
   0x0000000000400f55 <+64>:    mov    $0xc6,%eax
   0x0000000000400f5a <+69>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f5c <+71>:    mov    $0x31e,%eax
   0x0000000000400f61 <+76>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f63 <+78>:    mov    $0x299,%eax
   0x0000000000400f68 <+83>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f6a <+85>:    mov    $0x3a,%eax
   0x0000000000400f6f <+90>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f71 <+92>:    mov    $0x270,%eax
   0x0000000000400f76 <+97>:    jmp    0x400f97 <phase_3+130>
   0x0000000000400f78 <+99>:    mov    $0x10b,%eax
   0x0000000000400f7d <+104>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f7f <+106>:   mov    $0x80,%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400f84 <+111>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f86 <+113>:   callq  0x40142a <explode_bomb>
   0x0000000000400f8b <+118>:   mov    $0x0,%eax
   0x0000000000400f90 <+123>:   jmp    0x400f97 <phase_3+130>
   0x0000000000400f92 <+125>:   mov    $0x3f,%eax
   0x0000000000400f97 <+130>:   cmp    0x4(%rsp),%eax
   0x0000000000400f9b <+134>:   je     0x400fa2 <phase_3+141>
   0x0000000000400f9d <+136>:   callq  0x40142a <explode_bomb>
   0x0000000000400fa2 <+141>:   mov    0x8(%rsp),%rax
   0x0000000000400fa7 <+146>:   xor    %fs:0x28,%rax
   0x0000000000400fb0 <+155>:   je     0x400fb7 <phase_3+162>
   0x0000000000400fb2 <+157>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fb7 <+162>:   add    $0x18,%rsp
   0x0000000000400fbb <+166>:   retq
End of assembler dump.
(gdb) u * 0x0000000000400fbb
main (argc=<optimized out>, argv=<optimized out>) at bomb.c:90
90          phase_defused();
(gdb)